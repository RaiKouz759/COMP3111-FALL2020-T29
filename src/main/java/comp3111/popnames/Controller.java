/**
 * Building on the sample skeleton for 'ui.fxml' COntroller Class generated by SceneBuilder 
 */
package comp3111.popnames;

import java.io.IOException;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.XYChart;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.PieChart;
import javafx.scene.control.Button;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.cell.MapValueFactory;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TableView;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TableColumn;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.VBox;
import javafx.scene.shape.Rectangle;
import javafx.scene.layout.Region;
import javafx.scene.text.Text;
import javafx.util.Pair;
import javafx.concurrent.Task;

import java.lang.NumberFormatException;
import java.net.URL;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;

import java.text.DecimalFormat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.ResourceBundle;

import java.io.File;
import java.io.FileNotFoundException;



public class Controller implements Initializable{

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldNameF;

    @FXML
    private TextField textfieldYear;

    @FXML
    private Button buttonRankM;

    @FXML
    private TextField textfieldNameM;
    
    @FXML
    private Button task1Button;

    @FXML
    private Button buttonRankF;

    @FXML
    private Button buttonTopM;

    @FXML
    private Button buttonTopF;

    @FXML
    private Button buttonSummary;
    
    @FXML
    private Tab tabReport1;

    @FXML
    private ToggleGroup T1;

    @FXML
    private Tab tabReport2;

    @FXML
    private TextField task2TextName;

    @FXML
    private ToggleGroup task2Toggle;

    @FXML
    private RadioButton task2RadioMale;

    @FXML
    private RadioButton task2RadioFemale;

    @FXML
    private TextField task2TextStartPeriod;

    @FXML
    private TextField task2TextEndPeriod;

    @FXML
    private Button task2ButtonGenerate;

    @FXML
    private TextArea task2TextResult;

    @FXML
    private TableView<Map> task2TableResult;

    @FXML
    private LineChart<Integer, Number> task2LineChartResult;

    @FXML
    private Tab tabReport3;

    @FXML
    private ToggleGroup T111;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextField task6TextName1;

    @FXML
    private ToggleGroup task6Toggle1;

    @FXML
    private RadioButton task6RadioMale1;

    @FXML
    private RadioButton task6RadioFemale1;

    @FXML
    private TextField task6TextYear1;

    @FXML
    private TextField task6TextName2;

    @FXML
    private ToggleGroup task6Toggle2;

    @FXML
    private RadioButton task6RadioMale2;

    @FXML
    private RadioButton task6RadioFemale2;

    @FXML
    private ToggleGroup task6Toggle3;

    @FXML
    private RadioButton task6RadioYounger;

    @FXML
    private RadioButton task6RadioOlder;

    @FXML
    private RadioButton task6RadioCustom;

    @FXML
    private TextField task6TextYear2;

    @FXML
    private ToggleGroup task6Toggle4;

    @FXML
    private RadioButton task6RadioNKT6;

    @FXML
    private RadioButton task6RadioNorm;

    @FXML
    private RadioButton task6RadioLinear;

    @FXML
    private Button task6ButtonReport;

    @FXML
    private Button task6ButtonCancel;

    @FXML
    private ProgressBar task6ProgressBar;

    @FXML
    private Label task6TextResult;

    @FXML
    private PieChart task6PieChartResult;

    @FXML
    private LineChart<Integer, Number> task6LineChartResult;

    Task<Pair<ArrayList<Pair<Double, Double>>, ArrayList<Pair<Double, Double>>>> task6LinTask0;
    Task<Pair<Double, Double>> task6LinTask1;
    Task<Pair<Double, Double>> task6LinTask2;

    Pair<ArrayList<Pair<Double, Double>>, ArrayList<Pair<Double, Double>>> tasks6Points = null;

    @FXML
    private TextArea textAreaConsole;
    
    @FXML
    private TextField numRankTextField;
    
    @FXML
    private RadioButton maleRadioButton;
    
    @FXML
    private RadioButton femaleRadioButton;

    @FXML
    private TextField endPeriodTextField;

    @FXML
    private TextField startPeriodTextField;
    
    @FXML
    private TableView<Map> report1Table;
    
    @FXML   
    private ChoiceBox<String> app2ChoiceBox;
    
    @FXML
    private BarChart<String, Integer> rep1BarChart;
    
    @FXML
    private TextArea rep1Comment;
    
    @FXML
    private Label rep1Label;

    @FXML
    private Rectangle step2Cover;
    

    @FXML
    private RadioButton step2Radio4;

    @FXML
    private RadioButton step2Radio5;

    @FXML
    private RadioButton step2Radio6;
    
    //activity 5 FXML objects
    @FXML
    private TextField app2YourName;

    @FXML
    private RadioButton app2YourGenderM;

    @FXML
    private RadioButton app2YourGenderF;

    @FXML
    private TextField app2YOB;

    @FXML
    private RadioButton app2SoulGenderM;

    @FXML
    private RadioButton app2SoulGenderF;

    @FXML
    private RadioButton app2SoulYounger;

    @FXML
    private RadioButton app2SoulOlder;
    
    @FXML
    private Label app2PredictSentence;

    @FXML
    private Label app2Answer;
    
    @FXML
    private Button app2Button;
    
    @FXML
    private RadioButton app2RadioNK;

    @FXML
    private ToggleGroup T3;

    @FXML
    private RadioButton app2RadioJaro;
    

    @FXML
    private RadioButton step2Radio1;

    @FXML
    private ToggleGroup T5;

    @FXML
    private RadioButton step2Radio2;

    @FXML
    private RadioButton step2Radio3;

    @FXML
    private Label step2Label;

    @FXML
    private Button step2Button;
    // end of activity5 objects

    @FXML
    private ChoiceBox<String> historyChoice;

    @FXML
    private TextArea historyText;
    
    @FXML
    private TextField task3_year_end;

    @FXML
    private TextField task3_year_start;

    @FXML
    private Button task3_report;
    
    @FXML
    private RadioButton t3_f;
    
    @FXML
    private RadioButton t3_m;
    
    @FXML
    private ToggleGroup T3_toggle_group;
    
    @FXML
    private TextField t3_topN;
    
    @FXML
    private TextArea t3_text_output;
    
    @FXML
    private TableView<Map> task3_table;
    
    @FXML
    private TextField t4_dname;

    @FXML
    private TextField t4_mname;

    @FXML
    private TextField t4_dyob;

    @FXML
    private TextField t4_myob;

    @FXML
    private TextField t4_vyear;

    @FXML
    private Button t4_gr;
    
    @FXML
    private RadioButton t4_nkt4;

    @FXML
    private ToggleGroup T4_algorithm;

    @FXML
    private RadioButton t4_jaro;
    
    @FXML
    private TextArea t4_text_output;
    
    @FXML
    private Label t4_boy_label;

    @FXML
    private Label t4_girl_label;

    @FXML
    private Label t4_b1;

    @FXML
    private Label t4_b2;

    @FXML
    private Label t4_b3;

    @FXML
    private Label t4_g1;

    @FXML
    private Label t4_g2;

    @FXML
    private Label t4_g3;
    
    //history elements
    @FXML
    private Button historyButtonRerun;

    @FXML
    private TableView<Map> historyTableView;
    // end of history 
    
    @FXML
    public ObservableList<String> log_obList;
    
    @FXML
    private Tab historyTab;

    @FXML
    private TabPane tabpane;



    
    

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        
        // this part is to initialize the choiceBox in activity5
        ArrayList<String> list = new ArrayList<String>();
        list.add("NK-T5");
        list.add("Levenshtein Distance");
        ObservableList<String> obList = FXCollections.observableList(list);
        app2ChoiceBox.setItems(obList);
        app2ChoiceBox.setValue("NK-T5");
        // end of initialization of activity5
        
        // initialization for activity 2
        task2TableResult.getColumns().clear();
        task2TableResult.refresh();

        TableColumn<Map,String> yearColumn = new TableColumn<>("Year");
        yearColumn.setCellValueFactory(new MapValueFactory<>("year"));
        yearColumn.setResizable(false);
        // yearColumn.prefWidthProperty().bind(task2TableResult.widthProperty().multiply(0.2));
        
        TableColumn<Map, String> rankColumn = new TableColumn<>("Rank");
        rankColumn.setCellValueFactory(new MapValueFactory<>("rank"));
        rankColumn.setResizable(false);
        // rankColumn.prefWidthProperty().bind(task2TableResult.widthProperty().multiply(0.2));
        
        TableColumn<Map, String> countColumn = new TableColumn<>("Count");
        countColumn.setCellValueFactory(new MapValueFactory<>("count"));
        countColumn.setResizable(false);
        // countColumn.prefWidthProperty().bind(task2TableResult.widthProperty().multiply(0.2));

        TableColumn<Map, String> percentageColumn = new TableColumn<>("Percentage");
        percentageColumn.setCellValueFactory(new MapValueFactory<>("percentage"));
        percentageColumn.setResizable(false);
        // percentageColumn.prefWidthProperty().bind(task2TableResult.widthProperty().multiply(0.4));
        task2TableResult.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        task2TableResult.getColumns().addAll(yearColumn, rankColumn, countColumn, percentageColumn);
        
        // end of initializatin for activity 2

        // initialization for activity 6

        task6PieChartResult.setStartAngle(90);
        task6PieChartResult.setClockwise(true);
        task6PieChartResult.setVisible(false);
        resetTask6();

        // end of initialization for activity 6


        historyTableView.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
        // display the change in the tableview after selecting the choicebox. 
        historyChoice.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<String>() {

			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				System.out.println("entering the changed funciton of the historychoice");
				// clear the contents of the table
		        historyTableView.getColumns().clear();
		        historyTableView.getItems().clear();
		        historyTableView.refresh();
		        
		        // initialize the columns
		        TableColumn<Map,String> dateTimeColumn = new TableColumn<>("Date & Time");
		        dateTimeColumn.setCellValueFactory(new MapValueFactory<>("datetime"));
		        historyTableView.getColumns().add(dateTimeColumn);
		        
		        TableColumn<Map,String> taskColumn = new TableColumn<>("Task");
		        taskColumn.setCellValueFactory(new MapValueFactory<>("task"));
		        historyTableView.getColumns().add(taskColumn);

		        TableColumn<Map,String> inputColumn = new TableColumn<>("Data Inputs");
		        inputColumn.setCellValueFactory(new MapValueFactory<>("inputs"));
		        historyTableView.getColumns().add(inputColumn);
		        
		        // add the relavant data to the table rows
		        try {
					ArrayList<String> queryList = History.readHistory(newValue);
					System.out.println(queryList.size());
					ObservableList<Map<String, Object>> items =
			                FXCollections.<Map<String, Object>>observableArrayList();
					
					//parse the string from the arraylist starting from the most current query date, task, inputs
					for (int i=queryList.size() - 1; i>=0; i--) {
						System.out.println("in querylist for loop");
						Map<String, Object> item = new HashMap<>();
						String cur = queryList.get(i);
						ArrayList<String> components = new ArrayList<>(Arrays.asList(cur.split(",[ ]*")));
						if (components.size() != 3) {
							System.out.println("Something went wrong");
							showWarning("Error", "components array is not size 3");
							return;
						}
						item.put("datetime", components.get(0));
						item.put("task", components.get(1));
						item.put("inputs", components.get(2));
						System.out.println("testing component");
						items.add(item);
						System.out.println(components.get(2));
					}
					
					historyTableView.getItems().addAll(items);
					
				} catch (FileNotFoundException e) {
					e.printStackTrace();
					showWarning("File not found", "File is not found. ");
					return;
				}		        
		        
			}
		}
        );

        
    }
    
    @FXML
    void clickHistory() {
    	if (historyTab.isSelected()) {
    		String filePath = new File("").getAbsolutePath();
    		filePath = filePath.concat("/src/main/resources/logs");
    		
    		// create directory if it does not exists
    		new File(filePath).mkdirs();
    		File dir = new File(filePath);
    		File[] directoryListing = dir.listFiles();
    		if (directoryListing != null) {
    	        ArrayList<String> log_list = new ArrayList<String>();
    		    for (File child : directoryListing) {
    		      log_list.add(child.getName());
    		    }
    	        log_obList = FXCollections.observableList(log_list);
    	        historyChoice.setItems(log_obList);
    	        if (log_obList.size() > 0) {
		        	historyChoice.setValue(log_obList.get(log_obList.size()-1));
		        }
	    	}
	    }
    }

    @FXML
    void historyRerun() {
    	if (historyTableView.getSelectionModel().isEmpty()) {
    		showWarning("Invalid Selection", "Please select one history record to rerun.");
    		return;
    	}
    	Map<String, String> entry = historyTableView.getSelectionModel().getSelectedItem();
    	String task = entry.get("task");
    	String inputs = entry.get("inputs");
		switch (task.substring(task.length() - 1)) {
			case "1":
				tabpane.getSelectionModel().select(0);
				rerunTask1(inputs);
				break;
			case "2":
				tabpane.getSelectionModel().select(1);
				rerunTask2(inputs);
				break;
			case "3":
				tabpane.getSelectionModel().select(2);
				rerunTask3(inputs);
				break;
			case "4":
				tabpane.getSelectionModel().select(3);
				rerunTask4(inputs);
				break;
			case "5":
				tabpane.getSelectionModel().select(4);
				rerunTask5(inputs);
				break;
			case "6":
				tabpane.getSelectionModel().select(5);
				rerunTask6(inputs);
				break;
			default:
				showWarning("Invalid Task Number", "There is something wrong with this record.");
				return;

		}
    }

    @FXML
    void rerunTask1(String inputs) {
		//fill in the elements here
// parse the string of inputs and rerun the query
		ArrayList<String> input_data = new ArrayList<>(Arrays.asList(inputs.split(";")));
		HashMap<String, String> input_map = new HashMap<>();
		for (String s : input_data) {
			String[] input_pair = s.split(":");
			input_map.put(input_pair[0], input_pair[1]);
		}
		numRankTextField.setText(input_map.get("numRankTextField"));
		if (input_map.get("maleRadioButton").equals("0")) {
			maleRadioButton.setSelected(true);
		} else {
			femaleRadioButton.setSelected(true);
		}
		startPeriodTextField.setText(input_map.get("startPeriodTextField"));
		endPeriodTextField.setText(input_map.get("endPeriodTextField"));
		
		doTask1();
    }

    @FXML
    void rerunTask2(String inputs) {
    	ArrayList<String> elements = new ArrayList<>(Arrays.asList(inputs.split(";")));
		for (String element : elements) {
			String str[] = element.split(":", 2);
			switch(str[0]) {
				case "task2TextName":
					task2TextName.setText(str[1]);
					break;
				case "task2RadioMale":
					if (str[1].equals("0")) {
						task2RadioMale.setSelected(true);
					} else {
						task2RadioFemale.setSelected(true);
					}
					break;
				case "task2TextStartPeriod":
					task2TextStartPeriod.setText(str[1]);
					break;
				case "task2TextEndPeriod":
					task2TextEndPeriod.setText(str[1]);
					break;
				default:
					break;
			}
		}
		doTask2();
    }

    @FXML
    void rerunTask3(String inputs) {
    	ArrayList<String> input_data = new ArrayList<>(Arrays.asList(inputs.split(";")));
		HashMap<String, String> input_map = new HashMap<>();
		for (String s : input_data) {
			String[] input_pair = s.split(":");
			input_map.put(input_pair[0], input_pair[1]);
		}
		task3_year_start.setText(input_map.get("start_year"));
		task3_year_end.setText(input_map.get("end_year"));
		t3_topN.setText(input_map.get("topN"));
		if (input_map.get("gender").equals("M")) {
			t3_m.setSelected(true);
			t3_f.setSelected(false);
		} else {
			t3_m.setSelected(false);
			t3_f.setSelected(true);
		}
		doTask3();
    }

    @FXML
    void rerunTask4(String inputs) {
    	ArrayList<String> input_data = new ArrayList<>(Arrays.asList(inputs.split(";")));
		HashMap<String, String> input_map = new HashMap<>();
		for (String s : input_data) {
			String[] input_pair = s.split(":");
			input_map.put(input_pair[0], input_pair[1]);
		}
		
		t4_dname.setText(input_map.get("dName"));
    	t4_mname.setText(input_map.get("mName"));
    	t4_dyob.setText(input_map.get("dYOB"));
	    t4_myob.setText(input_map.get("mYOB"));
	    t4_vyear.setText(input_map.get("vYear"));
	    
	    if(input_map.get("choice").equals("NK-T4")) {
	    	t4_nkt4.setSelected(true);
	    	t4_jaro.setSelected(false);
	    } else {
	    	t4_nkt4.setSelected(false);
	    	t4_jaro.setSelected(true);
	    }
	    
		doTask4();
    }

    @FXML
    void rerunTask5(String inputs) {
		/*fill in the elements here
		
		*/
		ArrayList<String> input_data = new ArrayList<>(Arrays.asList(inputs.split(";")));
		HashMap<String, String> input_map = new HashMap<>();
		for (String s : input_data) {
			String[] input_pair = s.split(":");
			input_map.put(input_pair[0], input_pair[1]);
		}
		app2YourName.setText(input_map.get("app2YourName"));
		if (input_map.get("app2YourGenderM").equals("0")) {
			app2YourGenderM.setSelected(true);
		} else {
			app2YourGenderF.setSelected(true);
		}
		app2YOB.setText(input_map.get("app2YOB"));
		if (input_map.get("app2SoulGenderM").equals("0")) {
			app2SoulGenderM.setSelected(true);
		} else {
			app2SoulGenderF.setSelected(true);
		}
		if (input_map.get("app2SoulYounger").equals("0")) {
			app2SoulYounger.setSelected(true);
		} else {
			app2SoulOlder.setSelected(true);
		}
		if (input_map.get("app2RadioNK").equals("1")) {
			app2RadioNK.setSelected(true);
			doTask5();
		} else {
			app2RadioJaro.setSelected(true);
			app2Answer.setText(input_map.get("chosenName"));
			app2Answer.setVisible(true);
			String query = "Task 5, " + inputs;
	        try {
				History.storeHistory(query);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				System.out.println("Failed to store query history");
			}
			}
		
    }

    @FXML
    void rerunTask6(String inputs) {
		ArrayList<String> elements = new ArrayList<>(Arrays.asList(inputs.split(";")));
		for (String element : elements) {
			String str[] = element.split(":", 2);
			switch(str[0]) {
				case "task6TextName1":
					task6TextName1.setText(str[1]);
					break;
				case "task6Toggle1":
					if (str[1].equals("0")) {
						task6RadioMale1.setSelected(true);
					} else {
						task6RadioFemale1.setSelected(true);
					}
					break;
				case "task6TextYear1":
					task6TextYear1.setText(str[1]);
					break;
				case "task6TextName2":
					task6TextName2.setText(str[1]);
					break;
				case "task6Toggle2":
					if (str[1].equals("0")) {
						task6RadioMale2.setSelected(true);
					} else {
						task6RadioFemale2.setSelected(true);
					}
					break;
				case "task6Toggle3":
					if (str[1].equals("0")) {
						task6RadioYounger.setSelected(true);
					} else if (str[1].equals("1")) {
						task6RadioOlder.setSelected(true);
					} else {
						task6RadioCustom.setSelected(true);
					}
					break;
				case "task6TextYear2":
					task6TextYear2.setText(str[1]);
					break;
				case "task6Toggle4":
					if (str[1].equals("0")) {
						task6RadioNKT6.setSelected(true);
					} else if (str[1].equals("1")) {
						task6RadioNorm.setSelected(true);
					} else {
						task6RadioLinear.setSelected(true);
					}
					break;
				default:
					break;
			}
		}
		doTask6();
    }

        
    /**
     *  Task One
     *  To be triggered by the Generate Report Button in Reporting 1 tab.
     *  
     */
    @FXML
    void doTask1() {
        int numRanks;
        int startPeriod;
        int endPeriod;
        int gender;
        try {
            // input validation and catches any errors
                numRanks = Integer.parseInt(numRankTextField.getText());
                startPeriod = Integer.parseInt(startPeriodTextField.getText());
                endPeriod = Integer.parseInt(endPeriodTextField.getText());
                
            if (maleRadioButton.isSelected()) {
                gender = 0;
            } else {
                gender = 1;
            }
            
        } catch(NumberFormatException e) {
            // some error catching here
        	showWarning("Invalid Input Format", "Please only enter numbers.");
            return;
        }
        if (!Activity1Query.isNumOfResultsCorrect(numRanks)) {
        	showWarning("Invalid Input", "Please enter an N that is >= 1. ");
        	return;
        }
        if (!Activity1Query.isPeriodCorrect(startPeriod, endPeriod)) {
        	showWarning("Invalid Input", "Start and End periods must be within the boundaries stated.");
        	return;
        }
        
        ArrayList<YearRecords> yearRecordsList = Activity1Query.executeQuery(numRanks, gender, startPeriod, endPeriod);
        // clear all the contents of the table view & bar chart
        report1Table.getColumns().clear();
        report1Table.getItems().clear();
        report1Table.refresh();
        rep1BarChart.getData().clear();
        rep1BarChart.setVisible(true);

        // initializing the year column
        TableColumn<Map,String> yearColumn = new TableColumn<>("Year");
        yearColumn.setCellValueFactory(new MapValueFactory<>("year"));
        report1Table.getColumns().add(yearColumn);
        
        int index = 1;
        for (; index <= numRanks; index++) {
            TableColumn<Map, String> topColumn = new TableColumn<>("Top " + index);
            topColumn.setCellValueFactory(new MapValueFactory<>("top" + index));
            report1Table.getColumns().add(topColumn);
        }
        ObservableList<Map<String, Object>> items =
                FXCollections.<Map<String, Object>>observableArrayList();

        for (YearRecords y : yearRecordsList) {
            Map<String, Object> item = new HashMap<>();
            item.put("year", y.getYear());
            index = 1;
            for (NameRecord nr : y.getNameRecordList()) {
                item.put("top" + index, nr.getName());
                index++;
            }
            items.add(item);
        }
        report1Table.getItems().addAll(items);
        
        // display bar chart with info. 
        rep1BarChart.setVisible(true);
        LinkedHashMap<String, Integer> top3Names = Activity1Query.top3Names;
        
        XYChart.Series<String, Integer> dataSeries = new XYChart.Series<String, Integer>();
        dataSeries.setName(Integer.toString(startPeriod) + " - " + Integer.toString(endPeriod));
        for (Entry<String, Integer> entry : top3Names.entrySet())
        {
            dataSeries.getData().add(new XYChart.Data<String, Integer>(entry.getKey(), entry.getValue()));
            
        }
        rep1BarChart.getData().add(dataSeries);
        rep1Comment.setVisible(true);
        rep1Comment.setText(Activity1Query.comment);
        rep1Label.setVisible(true);
        
        
        
    }

    /**
     *  Task Two
     *  To be triggered by the Generate Report Button in Reporting 2 tab.
     *  
     */
    @FXML
    void doTask2() {
        String name;
        int gender;
        int startPeriod;
        int endPeriod;
        name = task2TextName.getText();
        if(name.equals("")){
            showWarning("Invalid Name", "Please enter a name.");
            return;
        }
        try {
            startPeriod = Integer.parseInt(task2TextStartPeriod.getText());
            endPeriod = Integer.parseInt(task2TextEndPeriod.getText());
        } catch(NumberFormatException e) {
            showWarning("Invalid Period", "Period must be integers.");
            return;
        }      
        if (task2RadioMale.isSelected()) {
            gender = 0;
        } else {
            gender = 1;
        }
        Pair<ArrayList<RankRecord>, String> queryResult;
        try {
            queryResult = Activity2Query.executeQuery(name, gender, startPeriod, endPeriod);
        } catch(RuntimeException e) {
            if(e.getMessage().equals("length")) {
                showWarning("Invalid Name", "Name must contain only 2 to 15 characters.");
            } else if(e.getMessage().equals("char")) {
                showWarning("Invalid Name", "Name must contain only letters.");
            } else if(e.getMessage().equals("start")) {
                showWarning("Invalid Period", "Starting year must be an integer between 1880 and 2019.");
            } else if(e.getMessage().equals("end")) {
                showWarning("Invalid Period", "Ending year must be an integer between 1880 and 2019.");
            } else { // if(e.getMessage().equals("startend")) {
                showWarning("Invalid Period", "Both starting and ending years must be integers between 1880 and 2019.");
            }
            return;
        }
        ArrayList<RankRecord> rankRecords = queryResult.getKey();

        task2TextResult.setText(queryResult.getValue());

        task2TableResult.getItems().clear();
        ObservableList<Map<String, Object>> items = FXCollections.<Map<String, Object>>observableArrayList();

        task2LineChartResult.getData().clear();
        XYChart.Series<Integer, Number> series = new XYChart.Series<>();
        series.setName(name);
        
        DecimalFormat df = new DecimalFormat("0");
        df.setMaximumFractionDigits(340);
        for (RankRecord record : rankRecords) {
            Map<String, Object> item = new HashMap<>();
            item.put("year", record.getYear());
            if(record.isValid()) {
                item.put("rank", record.getRank());
                item.put("count", record.getCount());
                item.put("percentage", df.format(AnalyzeNames.round(record.getPercentage() * 100, 5)) + "%");
                series.getData().add(new XYChart.Data<>(record.getYear(), record.getPercentage() * 100));
            } else {
                item.put("rank", "NULL");
                item.put("count", "NULL");
                item.put("percentage", "NULL");
            }            
            items.add(item);
        }
        task2TableResult.getItems().addAll(items);
        
        task2LineChartResult.getData().add(series);
    }
    
    /**
     *  Task Three
     *  To be triggered by the Generate Report Button in Reporting 3 tab.
     *  
     */
    @FXML
    void doTask3() {
    	task3_table.getColumns().clear();
    	task3_table.getItems().clear();
    	task3_table.refresh();
    	
    	int year_start;
    	int year_end;
    	int topN;
    	
    	try {
    		year_start = Integer.parseInt(task3_year_start.getText());
        	year_end = Integer.parseInt(task3_year_end.getText());
        	
        } catch(NumberFormatException e) {
            showWarning("Invalid Period", "Period must be integers.");
            return;
        }   
    	try {
    		topN = Integer.parseInt(t3_topN.getText());
        } catch(NumberFormatException e) {
            showWarning("Invalid Entry", "Top N must be an integer");
            return;
        } 
    	
    	String gender = "";
    	if (this.T3_toggle_group.getSelectedToggle().equals(this.t3_m)) {
    		gender = "M";
    	}
    	else if (this.T3_toggle_group.getSelectedToggle().equals(this.t3_f)) {
    		gender = "F";
    	}
    	ArrayList<ArrayList<String>> Report;
    	
    	try {
    		Report = Task3.execute3Query(year_start, year_end, gender, topN);
        } catch(RuntimeException e) {
            if(e.getMessage().equals("start")) {
                showWarning("Invalid Period", "Starting year must be an integer between 1880 and 2019.");
            } else if(e.getMessage().equals("end")) {
                showWarning("Invalid Period", "Ending year must be an integer between 1880 and 2019.");
            } else if(e.getMessage().equals("start end")) {
                showWarning("Invalid Period", "Both starting and ending years must be integers between 1880 and 2019.");
            } else if(e.getMessage().equals("incorrect period order")) {
            	showWarning("Invalid Period", "Starting year is ahead of Ending year");
            } else if(e.getMessage().equals("incorrect TopN")) {
            	showWarning("Invalid Entry", "TopN must be >= 1");
            }
            return;
        }
    	
    	TableColumn<Map,String> nameColumn = new TableColumn<>("Name");
    	nameColumn.setCellValueFactory(new MapValueFactory<>("name"));
        task3_table.getColumns().add(nameColumn);
        
        TableColumn<Map, String> lrYear = new TableColumn<>("low rank year");
        lrYear.setCellValueFactory(new MapValueFactory<>("lrYear"));
        task3_table.getColumns().add(lrYear);

        TableColumn<Map, String> lr = new TableColumn<>("low rank");
        lr.setCellValueFactory(new MapValueFactory<>("lr"));
        task3_table.getColumns().add(lr);

        TableColumn<Map, String> hrYear = new TableColumn<>("high rank year");
        hrYear.setCellValueFactory(new MapValueFactory<>("hrYear"));
        task3_table.getColumns().add(hrYear);
        
        TableColumn<Map, String> hr = new TableColumn<>("high rank");
        hr.setCellValueFactory(new MapValueFactory<>("hr"));
        task3_table.getColumns().add(hr);
        
        TableColumn<Map, String> trendColumn = new TableColumn<>("Trend");
        trendColumn.setCellValueFactory(new MapValueFactory<>("trend"));
        task3_table.getColumns().add(trendColumn);
        
        ObservableList<Map<String, Object>> items = FXCollections.<Map<String, Object>>observableArrayList();
        
        for (ArrayList<String> record : Report) {
            Map<String, Object> item = new HashMap<>();
            item.put("name", record.get(0));
            item.put("lrYear", record.get(1));
            item.put("lr", record.get(2));
            item.put("hrYear", record.get(3));
            item.put("hr", record.get(4));
            item.put("trend", record.get(5));    
            items.add(item);
        }
        task3_table.getItems().addAll(items);
    	
    }
    
    /**
     *  Task Four
     *  To be triggered by the Get Recommendation in Reporting 4 tab.
     *  
     */
    @FXML
    void doTask4() {
    	String dName = t4_dname.getText();
    	String mName = t4_mname.getText();
    	int dYOB;
    	int mYOB;
    	int vYear;
    	try {
	    	dYOB = Integer.parseInt(t4_dyob.getText());
	    	mYOB = Integer.parseInt(t4_myob.getText());
	    	vYear = Integer.parseInt(t4_vyear.getText());
    	} catch(NumberFormatException e) {
            showWarning("Invalid Entry", "Period must be an integer");
            return;
        } 
    	String choice = "";
    	if (this.T4_algorithm.getSelectedToggle().equals(this.t4_nkt4)){
    		choice = "NK-T4";
    	}
    	else if (this.T4_algorithm.getSelectedToggle().equals(this.t4_jaro)) {
    		choice = "Jaro";
    	}
    	
    	ArrayList<ArrayList<String>> Report = new ArrayList<ArrayList<String>> ();
    	try {
    		Report = Task4.recommendation(dName, dYOB, mName, mYOB, vYear, choice);
    	}  catch(RuntimeException e) {
    		if(e.getMessage().equals("invalid dYOB")) {
                showWarning("Invalid Period", "Dad Year of Birth must be in range 1880 - 2019");
            } else if(e.getMessage().equals("invalid mYOB")) {
                showWarning("Invalid Period", "Mom Year of Birth must be in range 1880 - 2019");
            } else if(e.getMessage().equals("invalid vYear")) {
                showWarning("Invalid Period", "Vintage Year must be in range 1880 - 2019");
            } else if(e.getMessage().equals("dName length")) {
                showWarning("Invalid Name", "Dad's name must be 2 to 15 characters long.");
            } else if(e.getMessage().equals("mName length")) {
                showWarning("Invalid Name", "Mom's name must be 2 to 15 characters long.");
            } else if(e.getMessage().equals("dName char")) {
                showWarning("Invalid Name", "Dad's name has invalid characters");
            } else if(e.getMessage().equals("mName char")) {
                showWarning("Invalid Name", "Mom's name has invalid characters");
            }
    	}
    	if(choice == "NK-T4") {
    		t4_boy_label.setText("Boy names");
    		t4_girl_label.setText("Girl names");
    		t4_b1.setText(Report.get(0).get(0));
    		t4_g1.setText(Report.get(1).get(0));
    	} else {
    		t4_boy_label.setText("Boy names and scores");
    		t4_girl_label.setText("Girl names and scores");
    		t4_b1.setText(Report.get(0).get(0));
    		t4_b2.setText(Report.get(0).get(1));
    		t4_b3.setText(Report.get(0).get(2));
    		t4_g1.setText(Report.get(1).get(0));
    		t4_g2.setText(Report.get(1).get(1));
    		t4_g3.setText(Report.get(1).get(2));
    	}
    }
    
    
    /**
     *  Task Five
     *  To be triggered by the Generate Report Button in Application 2 tab.
     *  
     */
    @FXML
    void doTask5() {
        String name;
        int gender;
        int prefGender;
        int yob;
        boolean prefYounger;
        try {
            // get data from input fields
            name = app2YourName.getText();
            yob = Integer.parseInt(app2YOB.getText());
            if (app2YourGenderM.isSelected()) {
                gender = 0;
            } else {
                gender = 1;
            }
            if (app2SoulGenderM.isSelected()) {
                prefGender = 0;
            } else {
                prefGender = 1;
            }
            prefYounger = app2SoulYounger.isSelected();
            // input validation
            if (!Activity5Query.isNameCorrect(name)) {
            	showWarning("Invalid Input", "Please only enter letters for your name.");
                return;
            } 
            if (!Activity5Query.isYOBCorrect(yob)){
            	showWarning("Invalid Input", "Please only enter year of births that are within the boundaries stated.");
            	return;
            }
            if ( !AnalyzeNames.checkNameLength(name)) {
            	showWarning("Invalid Input", "Please only enter names of length less than 16 characters.");
            	return;
            }
            
        } catch(NumberFormatException e) {
            //error catching logic here
        	showWarning("Invalid Input Format", "Please only enter numbers for YOB.");
            return;
        }
        String oName = "undefined";
        if(app2RadioNK.isSelected()) {
            oName = Activity5Query.executeQueryNKT5( name, yob, gender, prefGender, prefYounger);
            app2Answer.setText(oName);
            app2Answer.setVisible(true);
        }else {
        	ArrayList<String> list = new ArrayList<String>();
        	list = Activity5Query.executeQueryJaroStepOne(name, yob, gender, prefGender, prefYounger);
        	app2Button.setDisable(true);
        	step2Button.setVisible(true);
        	step2Radio1.setText(list.get(0));
        	step2Radio2.setText(list.get(1));
        	step2Radio3.setText(list.get(2));
        	step2Radio4.setText(list.get(3));
        	step2Radio5.setText(list.get(4));
        	step2Radio6.setText(list.get(5));  
        	step2Radio1.setVisible(true);
        	step2Radio2.setVisible(true);
        	step2Radio3.setVisible(true);
        	step2Radio4.setVisible(true);
        	step2Radio5.setVisible(true);
        	step2Radio6.setVisible(true);
        	step2Label.setVisible(true);
        	step2Cover.setVisible(true);
        	app2Answer.setVisible(false);
        }

    }

    @FXML
    void doTask5Part2() {
        String name;
        int gender;
        int prefGender;
        int yob;
        boolean prefYounger;
        String oName = "undefined";
    	
        name = app2YourName.getText();
        yob = Integer.parseInt(app2YOB.getText());
        prefYounger = app2SoulYounger.isSelected();
        if (app2YourGenderM.isSelected()) {
            gender = 0;
        } else {
            gender = 1;
        }
        if (app2SoulGenderM.isSelected()) {
            prefGender = 0;
        } else {
            prefGender = 1;
        }
    	String chosenName;
        if (step2Radio1.isSelected()) {
        	chosenName = step2Radio1.getText();
        } else if(step2Radio2.isSelected()) {
        	chosenName = step2Radio2.getText();
        } else if(step2Radio3.isSelected()) {
        	chosenName = step2Radio2.getText();
        } else if(step2Radio4.isSelected()) {
        	chosenName = step2Radio2.getText();
        }  else if(step2Radio5.isSelected()) {
        	chosenName = step2Radio2.getText();
        } else  {
        	chosenName = step2Radio6.getText();
        }
        
        
        oName = Activity5Query.executeQueryJaroStepTwo( chosenName, name, gender, yob, prefYounger, prefGender);
    	//clean up
    	step2Radio1.setVisible(false);
    	step2Radio2.setVisible(false);
    	step2Radio3.setVisible(false);
    	step2Radio4.setVisible(false);
    	step2Radio5.setVisible(false);
    	step2Radio6.setVisible(false);
    	step2Button.setVisible(false);
    	app2Button.setDisable(false);
    	step2Cover.setVisible(false);
    	step2Label.setVisible(false);
        app2Answer.setText(oName);
        app2Answer.setVisible(true);
    }

    /**
     *  Task Six
     *  To be triggered by the Generate Report Button in Reporting 2 tab.
     *  
     */
    @FXML
    void doTask6() {
        String name1, name2;
        int gender1, gender2;
        int year1, year2;
        boolean isYounger = true;
        name1 = task6TextName1.getText();
        name2 = task6TextName2.getText();
        if(name1.equals("")){
            showWarning("Invalid Name", "Please enter your name.");
            return;
        }
        if (task6RadioMale1.isSelected()) {
            gender1 = 0;
        } else {
            gender1 = 1;
        }
        try {
            year1 = Integer.parseInt(task6TextYear1.getText());
        } catch(NumberFormatException e) {
            showWarning("Invalid Year of Birth", "Your year of birth must be an integer.");
            return;
        }
        if(name2.equals("")){
            showWarning("Invalid Name", "Please enter the name of your soulmate.");
            return;
        }
        if (task6RadioMale2.isSelected()) {
            gender2 = 0;
        } else {
            gender2 = 1;
        }
        if (task6RadioYounger.isSelected()) {
            isYounger = true;
            year2 = year1 == 2019 ? 2019 : year1 + 1;
        } else if (task6RadioOlder.isSelected()) {
            isYounger = false;
            year2 = year1 == 1880 ? 1880 : year1 - 1;
        } else {
            if (task6RadioNKT6.isSelected() || task6RadioNorm.isSelected()) {
                showWarning("Invalid Preference", "Either Younger or Older must be chosen for NK-T6 algorithms.");
                return;
            }
            try {
                year2 = Integer.parseInt(task6TextYear2.getText());
            } catch(NumberFormatException e) {
                showWarning("Invalid Year of Birth", "The year of birth of your soulmate must be an integer.");
                return;
            }
        }        
        float score = -1;
        String gender = Constants.genders[gender1];
        String genderMate = Constants.genders[gender2];
        ArrayList<Double> linearReg = null;
        try {
            if (task6RadioNKT6.isSelected()) {
                score = Activity6Query.executeNKT6(name1, gender1, year1, name2, gender2, isYounger, false);
            } else if (task6RadioNorm.isSelected()) {
                score = Activity6Query.executeNKT6(name1, gender1, year1, name2, gender2, isYounger, true);
            } else {
                task6TextName1.setDisable(true);
                task6RadioMale1.setDisable(true);
                task6RadioFemale1.setDisable(true);
                task6TextYear1.setDisable(true);
                task6TextName2.setDisable(true);
                task6RadioMale2.setDisable(true);
                task6RadioFemale2.setDisable(true);
                task6RadioYounger.setDisable(true);
                task6RadioOlder.setDisable(true);
                task6RadioCustom.setDisable(true);
                task6TextYear2.setDisable(true);
                task6RadioNKT6.setDisable(true);
                task6RadioNorm.setDisable(true);
                task6RadioLinear.setDisable(true);
                task6ButtonReport.setDisable(true);
                task6ButtonCancel.setDisable(false);
                task6TextResult.setVisible(false);
                task6PieChartResult.setVisible(false);
                task6LineChartResult.setVisible(false);
                
                Activity6Query.prepareLinear(name1, gender1, year1, name2, gender2, (task6RadioCustom.isSelected() ? 2 : (isYounger ? 0 : 1)), year2);
                
                task6LinTask0 = new Activity6QueryThreadTask(name1, gender1, year1, name2, gender2, year2);
                task6LinTask0.setOnFailed(wse -> {
                    System.out.println("Error");
                    task6LinTask0.getException().printStackTrace();
                    showWarning("Regression Error", "There are not enough data points for regression. Please use the other algorithms.");
                    resetTask6();
                });
                task6LinTask0.setOnSucceeded(wse1 -> {
                    //task6ProgressBar.progressProperty().unbind();
                    //task6ProgressBar.progressProperty().bind(task6LinTask2.progressProperty());
                    tasks6Points = task6LinTask0.getValue();
                    task6LinTask1 = new LinearRegressionTask(tasks6Points.getKey());
                    task6LinTask2 = new LinearRegressionTask(tasks6Points.getValue());
                    /* Checked in task 0
                    task6LinTask1.setOnFailed(wse -> {
                        System.out.println("Error");
                        task6LinTask1.getException().printStackTrace();
                        showWarning("Regression Error", "There are not enough data points for regression. Please use the other algorithms.");
                        resetTask6();
                    });
                    task6LinTask2.setOnFailed(wse -> {
                        System.out.println("Error");
                        task6LinTask2.getException().printStackTrace();
                        showWarning("Regression Error", "There are not enough data points for regression. Please use the other algorithms.");
                        resetTask6();
                    });*/
                    task6LinTask1.setOnSucceeded(wse -> {
                        //super.succeeded();
                        //task6ProgressBar.progressProperty().unbind();
                        //task6ProgressBar.progressProperty().bind(task6LinTask2.progressProperty());
                        new Thread(task6LinTask2).start();
                    });
                    
                    task6LinTask2.setOnSucceeded(wse -> {
                        // super.succeeded();
                        //task6ProgressBar.progressProperty().unbind();
                        //task6ProgressBar.setVisible(false);
                        doTask6AfterThread();
                    });

                    //task6ProgressBar.progressProperty().bind(task6LinTask1.progressProperty());
                    
                    //task6ProgressBar.setVisible(true);
                    new Thread(task6LinTask1).start();
                });

                new Thread(task6LinTask0).start();
                return;
            }
        } catch(RuntimeException e) {
            System.out.println("Thread error: " + e.getMessage());
            e.printStackTrace();
            if(e.getMessage().equals("length1")) {
                showWarning("Invalid Name", "Your name must contain only 2 to 15 characters.");
            } else if(e.getMessage().equals("length2")) {
                showWarning("Invalid Name", "The name of your soulmate must contain only 2 to 15 characters.");
            } else if(e.getMessage().equals("char1")) {
                showWarning("Invalid Name", "Your name must contain only letters.");
            } else if(e.getMessage().equals("char2")) {
                showWarning("Invalid Name", "The name of your soulmate must contain only letters.");
            } else if(e.getMessage().equals("year1")) {
                showWarning("Invalid Year of Birth", "Your year of birth must be an integer between 1880 and 2019.");
            } else if(e.getMessage().equals("year2")) {
                showWarning("Invalid Year of Birth", "The year of birth of your soulmate must be an integer between 1880 and 2019.");
            } else if(e.getMessage().equals("points") || e.getMessage().equals("linear")) {
                showWarning("Regression Error", "There are not enough data points for regression. Please use the other algorithms.");
            }
            resetTask6();
            return;
        }
        DecimalFormat df = new DecimalFormat("0");
        df.setMaximumFractionDigits(340);        
        task6TextResult.setText("Your score of compatibility is " + df.format(AnalyzeNames.round(score * 100, 5)) + "%");
        task6TextResult.setVisible(true);

        if (task6RadioNorm.isSelected() || task6RadioLinear.isSelected()) {
            task6PieChartResult.getData().clear();
            task6PieChartResult.setVisible(true);

            PieChart.Data sliceScore = new PieChart.Data("Score", score);
            PieChart.Data sliceSpace = new PieChart.Data("Space"  , 1 - score);

            task6PieChartResult.getData().add(sliceScore);
            task6PieChartResult.getData().add(sliceSpace);
            task6PieChartResult.setScaleShape(true);

            sliceSpace.getNode().setStyle("-fx-pie-color: #1d1d1d;");
        } else {
            task6PieChartResult.setVisible(false);
        }
        task6LineChartResult.setVisible(false);
    }

    @FXML
    void resetTask6() {
    	task6TextName1.setDisable(false);
        task6RadioMale1.setDisable(false);
        task6RadioFemale1.setDisable(false);
        task6TextYear1.setDisable(false);
        task6TextName2.setDisable(false);
        task6RadioMale2.setDisable(false);
        task6RadioFemale2.setDisable(false);
        task6RadioYounger.setDisable(false);
        task6RadioOlder.setDisable(false);
        task6RadioCustom.setDisable(false);
        task6TextYear2.setDisable(false);
        task6RadioNKT6.setDisable(false);
        task6RadioNorm.setDisable(false);
        task6RadioLinear.setDisable(false);
        task6ButtonReport.setDisable(false);
        task6ButtonCancel.setDisable(true);
        task6ProgressBar.setVisible(false);
        task6TextResult.setVisible(false);
        task6PieChartResult.setVisible(false);
        task6LineChartResult.setVisible(false);
    }

    @FXML
    void doTask6AfterThread() {
        resetTask6();        

        String name1, name2;
        int gender1, gender2;
        int year1, year2;
        boolean isYounger = true;
        name1 = task6TextName1.getText();
        name2 = task6TextName2.getText();
        if (task6RadioMale1.isSelected()) {
            gender1 = 0;
        } else {
            gender1 = 1;
        }
        year1 = Integer.parseInt(task6TextYear1.getText());
        if (task6RadioMale2.isSelected()) {
            gender2 = 0;
        } else {
            gender2 = 1;
        }
        if (task6RadioYounger.isSelected()) {
            isYounger = true;
            year2 = year1 + 1;
        } else if (task6RadioOlder.isSelected()) {
            isYounger = false;
            year2 = year1 - 1;
        } else {
            year2 = Integer.parseInt(task6TextYear2.getText());
        }        
        float score;
        String gender = Constants.genders[gender1];
        String genderMate = Constants.genders[gender2];
        ArrayList<Double> linearReg = null;
        Pair<Double, ArrayList<Double>> ret = Activity6Query.executeLinear(task6LinTask1.getValue(), task6LinTask2.getValue(), year1, year2);
        score = (float)ret.getKey().doubleValue();
        linearReg = ret.getValue();

        DecimalFormat df = new DecimalFormat("0");
        df.setMaximumFractionDigits(340);        
        task6TextResult.setText("Your score of compatibility is " + df.format(AnalyzeNames.round(score * 100, 5)) + "%");
        task6TextResult.setVisible(true);

        task6PieChartResult.getData().clear();
        task6PieChartResult.setVisible(true);

        PieChart.Data sliceScore = new PieChart.Data("Score", score);
        PieChart.Data sliceSpace = new PieChart.Data("Space"  , 1 - score);

        task6PieChartResult.getData().add(sliceScore);
        task6PieChartResult.getData().add(sliceSpace);

        sliceSpace.getNode().setStyle("-fx-pie-color: #1d1d1d;");
    
        task6LineChartResult.setVisible(true);
        task6LineChartResult.getData().clear();
        XYChart.Series<Integer, Number> series1 = new XYChart.Series<>();
        XYChart.Series<Integer, Number> series2 = new XYChart.Series<>();
        XYChart.Series<Integer, Number> series3 = new XYChart.Series<>();
        XYChart.Series<Integer, Number> series4 = new XYChart.Series<>();
        series1.setName(name1);
        series2.setName(name2);
        series3.setName(name1 + " Regression");
        series4.setName(name2 + " Regression");

        RankRecord record = null;
        RankRecord recordMate = null;
        int startYear = Math.max(year1, year2);
        for(int year = startYear; year <= 2019; ++year) {
            record = AnalyzeNames.getRankRecord(year, name1, gender);
            recordMate = AnalyzeNames.getRankRecord(year, name2, genderMate);
            if (record.isValid()) {
                series1.getData().add(new XYChart.Data<Integer, Number>(year, record.getRank()));
            }
            if (recordMate.isValid()) {
                series2.getData().add(new XYChart.Data<Integer, Number>(year, recordMate.getRank()));
            }
        }
        series3.getData().add(new XYChart.Data<Integer, Number>(startYear, linearReg.get(1).doubleValue()));
        series3.getData().add(new XYChart.Data<Integer, Number>(2019, linearReg.get(0).doubleValue() * (2019 - startYear) + linearReg.get(1).doubleValue()));
        series4.getData().add(new XYChart.Data<Integer, Number>(Math.max(year1, year2), linearReg.get(3).doubleValue()));
        series4.getData().add(new XYChart.Data<Integer, Number>(2019, linearReg.get(2).doubleValue() * (2019 - startYear) + linearReg.get(3).doubleValue()));
        
        task6LineChartResult.getData().add(series1);
        task6LineChartResult.getData().add(series2);
        task6LineChartResult.getData().add(series3);
        task6LineChartResult.getData().add(series4);        
    }

    private static void showWarning(String header, String message) {
        Alert alert = new Alert(AlertType.WARNING);
        alert.setTitle("Warning");
        alert.setHeaderText(header);
        alert.setContentText(message);
        alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
        alert.showAndWait();
    }
}

